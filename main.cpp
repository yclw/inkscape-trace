#include "ppotrace.h"
#include "svg/svg.h"
#include <iostream>
#include <fstream>
#include <cstring>  // for memcpy
#include <opencv2/opencv.hpp>
#include <gdkmm/pixbuf.h>
#include <gtkmm.h>

using namespace Inkscape::Trace::Potrace;
using namespace Inkscape::Trace;

// Â∞ÜOpenCV MatËΩ¨Êç¢‰∏∫GdkPixbuf
Glib::RefPtr<Gdk::Pixbuf> matToGdkPixbuf(const cv::Mat& mat) {
    cv::Mat rgb_mat;
    if (mat.channels() == 3) {
        cv::cvtColor(mat, rgb_mat, cv::COLOR_BGR2RGB);
    } else {
        cv::cvtColor(mat, rgb_mat, cv::COLOR_GRAY2RGB);
    }
    
    // Á°Æ‰øùÊï∞ÊçÆËøûÁª≠
    if (!rgb_mat.isContinuous()) {
        rgb_mat = rgb_mat.clone();
    }
    
    // üîß ‰øÆÂ§çÔºöÂàõÂª∫Êñ∞ÁöÑGdkPixbufÂπ∂Â§çÂà∂Êï∞ÊçÆÔºåËÄå‰∏çÊòØÂºïÁî®‰∏¥Êó∂Êï∞ÊçÆ
    auto pixbuf = Gdk::Pixbuf::create(Gdk::Colorspace::RGB, false, 8, 
                                     rgb_mat.cols, rgb_mat.rows);
    
    // Â§çÂà∂Êï∞ÊçÆÂà∞GdkPixbufÁöÑÂÜÖÂ≠òÁ©∫Èó¥
    auto dst_data = pixbuf->get_pixels();
    auto src_data = rgb_mat.data;
    int src_rowstride = rgb_mat.cols * 3;
    int dst_rowstride = pixbuf->get_rowstride();
    
    for (int y = 0; y < rgb_mat.rows; y++) {
        memcpy(dst_data + y * dst_rowstride, 
               src_data + y * src_rowstride, 
               src_rowstride);
    }
    
    return pixbuf;
}

// ÁîüÊàêÁúüÊ≠£ÁöÑÁü¢ÈáèÂåñSVGÊñá‰ª∂
void generateVectorSvg(const TraceResult& traceResult, 
                       const std::string& filename, int width, int height) {
    std::ofstream file(filename);
    
    // ËÆæÁΩÆC localeÈÅøÂÖçÊï∞Â≠ó‰∏≠ÁöÑÂçÉ‰ΩçÂàÜÈöîÁ¨¶
    file.imbue(std::locale::classic());
    
    file << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" << std::endl;
    file << "<svg width=\"" << width << "\" height=\"" << height << "\" ";
    file << "viewBox=\"0 0 " << width << " " << height << "\" ";
    file << "xmlns=\"http://www.w3.org/2000/svg\" ";
    file << "preserveAspectRatio=\"xMidYMid meet\">" << std::endl;
    
    // ÂèçËΩ¨ÂõæÂ±ÇÈ°∫Â∫èÔºåÁ°Æ‰øùÁ¨¨‰∏ÄÂ±ÇÂú®ÊúÄÂ∫ïÈÉ®ÔºåÊúÄÂêé‰∏ÄÂ±ÇÂú®ÊúÄÈ°∂ÈÉ®
    for (auto it = traceResult.rbegin(); it != traceResult.rend(); ++it) {
        if (it->path.empty()) continue;
        
        // ‰ΩøÁî®svg/svg.h‰∏≠Â£∞ÊòéÁöÑÂáΩÊï∞Êù•ÁîüÊàêË∑ØÂæÑÂ≠óÁ¨¶‰∏≤
        std::string pathData = sp_svg_write_path(it->path);
        
        file << "  <path d=\"" << pathData << "\" style=\"" << it->style << "\" />" << std::endl;
    }
    
    file << "</svg>" << std::endl;
    file.close();
}

int main(int argc, char* argv[]) {
    try {
        // Ê≠£Á°ÆÂàùÂßãÂåñGTKÂíåGLib
        auto app = Gtk::Application::create();
        // ÊàñËÄÖÊõ¥ÁÆÄÂçïÁöÑÊñπÂºè
        Glib::init();
        
        std::cout << "Ê≠£Âú®Âä†ËΩΩÂõæÂÉè test.jpg..." << std::endl;
        
        // Âè™‰ΩøÁî®OpenCVËØªÂèñÂõæÂÉè
        cv::Mat image = cv::imread("test.jpg");
        if (image.empty()) {
            std::cerr << "Êó†Ê≥ïÂä†ËΩΩÂõæÂÉè test.jpg" << std::endl;
            return 1;
        }
        
        std::cout << "ÂõæÂÉèÂ∞∫ÂØ∏: " << image.cols << "x" << image.rows << std::endl;
        
        // ËΩ¨Êç¢‰∏∫GdkPixbuf
        std::cout << "ËΩ¨Êç¢ÂõæÂÉèÊ†ºÂºè..." << std::endl;
        auto pixbuf = matToGdkPixbuf(image);
        if (!pixbuf) {
            std::cerr << "Êó†Ê≥ïËΩ¨Êç¢ÂõæÂÉèÊ†ºÂºè" << std::endl;
            return 1;
        }
        
        std::cout << "ÂàõÂª∫PotraceËøΩË∏™ÂºïÊìé..." << std::endl;
        
        std::cout << "ÂºÄÂßãÁü¢ÈáèÂåñËøΩË∏™..." << std::endl;
        
        // ÂàõÂª∫ËøõÂ∫¶ÂØπË±°
        Inkscape::Async::Progress progress;
        
        // ÊâßË°åPotraceËøΩË∏™
        TraceResult traceResult;
        
        // ÂàõÂª∫PotraceËøΩË∏™ÂºïÊìé
        PotraceTracingEngine engine(
            TraceType::QUANT_COLOR,    // ÈáèÂåñÈ¢úËâ≤Ê®°Âºè
            false,                     // ‰∏çÂèçËΩ¨
            6,                         // ÈáèÂåñÈ¢úËâ≤Êï∞Ôºö6Â±Ç
            0.35,                      // ‰∫ÆÂ∫¶ÈòàÂÄº
            0.0,                       // ‰∫ÆÂ∫¶Âú∞Êùø
            0.55,                      // ËæπÁºòÊ£ÄÊµãÈòàÂÄº
            6,                         // Â§öÊâ´ÊèèÈ¢úËâ≤Êï∞Ôºö6Â±Ç
            true,                      // Â§öÊâ´ÊèèÂ†ÜÂè†ÔºöStackÊ®°Âºè
            false,                     // ‰∏çÂπ≥Êªë
            true                      // ÁßªÈô§ËÉåÊôØ
        );
        
        traceResult = engine.trace(pixbuf, progress);
        
        std::cout << "ËøΩË∏™ÂÆåÊàêÔºåÂÖ±ÁîüÊàê " << traceResult.size() << " ‰∏™Áü¢ÈáèË∑ØÂæÑÂ±Ç" << std::endl;
        
        std::cout << "ÁîüÊàêÁü¢ÈáèÂåñSVGÊñá‰ª∂..." << std::endl;
        
        // ÁîüÊàêÁúüÊ≠£ÁöÑÁü¢ÈáèÂåñSVGÊñá‰ª∂
        generateVectorSvg(traceResult, "output.svg", image.cols, image.rows);
        
        std::cout << "Áü¢ÈáèÂåñSVGÊñá‰ª∂Â∑≤‰øùÂ≠ò‰∏∫ output.svg" << std::endl;

        std::cout << "Êñá‰ª∂Â§ßÂ∞èÔºö" << std::filesystem::file_size("output.svg") << std::endl;
        
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "ÈîôËØØ: " << e.what() << std::endl;
        return 1;
    }
}